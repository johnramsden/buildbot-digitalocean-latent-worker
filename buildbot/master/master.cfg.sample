# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import worker, util, schedulers, changes, steps

import DigitalOceanLatentWorker

# All secret data is in a separate password file.
import password

# Worker information
import workers


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

bez_git_repo = 'https://{}{}@github.com/johnramsden/bez'.format(
    password.github_token, ":x-oauth-basic")

c['workers'] = [
    worker.DigitalOceanLatentWorker(
        "bez-worker", password.bez_worker_pass,
        "ubuntu-16-04-x64", password.digitalocean_api_key,
        ssh_keys=['chin_id'], user_data=workers.do_worker_user_data['ubuntu']['user_data'])

]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        bez_git_repo,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=50))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["bez-builder"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["bez-builder"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# Compile code
bez_build_steps = [
    steps.Git(repourl=bez_git_repo, mode='incremental'),
    steps.CMake(
            generator='Unix Makefiles',
            # definitions={
            #     'CMAKE_C_COMPILER': "clang"
            # },
            options=[
                '-Wno-dev'
            ]
        ),
    steps.Compile(command=["make"]),
]

factory = util.BuildFactory(bez_build_steps)

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="bez-builder",
      workernames=["bez-worker"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Example Project"
c['titleURL'] = "https://github.com/johnramsden/exampleproject/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.ramsdenj.com:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))


c['www']['authz'] = util.Authz(
       allowRules = [
           util.AnyEndpointMatcher(role="admins")
       ],
       roleMatchers = [
           util.RolesFromUsername(roles=['admins'], usernames=['john'])
       ]
)
c['www']['auth'] = util.UserPasswordAuth({'john': password.user_john})

c['buildbotNetUsageData'] = "full"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
